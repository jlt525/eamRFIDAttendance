==> requirements.txt <==
asgiref==3.6.0
crispy-bootstrap3==2022.1
Django==4.1.7
django-crispy-forms==2.0
django-filter==23.1
djangorestframework==3.14.0
gunicorn==20.1.0
mysqlclient==2.1.1
Pygments==2.14.0
pytz==2022.7.1
sqlparse==0.4.3

==> EAMRegistrationSystem/settings.py <==
"""
Django settings for EAMRegistrationSystem project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@)l8!9g*-i4j&iyptl92t@98-&++tbxpi@()b@le+dtw0$rqe^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'crispy_forms',
    'crispy_bootstrap3',
    'Registration',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'EAMRegistrationSystem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'EAMRegistrationSystem.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'AttendanceDB',
        'USER': 'admin',
        'PASSWORD': 'admin',
        'HOST': '192.168.122.51',
        'PORT': '3306',
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)`
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Rest Framework (api)
REST_FRAMEWORK = {
            'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
            }

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap3"
CRISPY_TEMPLATE_PACK = "bootstrap3" 

==> EAMRegistrationSystem/urls.py <==
"""EAMRegistrationSystem URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('Registration.urls')),
]

==> EAMRegistrationSystem/wsgi.py <==
"""
WSGI config for EAMRegistrationSystem project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'EAMRegistrationSystem.settings')

application = get_wsgi_application()

==> Registration/admin.py <==
from django.contrib import admin
from Registration.models import Sessionstudent, Sessions, Students

class SessionsAdmin(admin.ModelAdmin):
    list_display = ("sessionid", "sessionname", "date", "starttime", "roomid")

class StudentsAdmin(admin.ModelAdmin):
    list_display = ("studentid", "fullname", "course")

class SessionstudentAdmin(admin.ModelAdmin):
    list_display = ("studentid", "sessionid", "presentstatus")

admin.site.register(Sessionstudent, SessionstudentAdmin)
admin.site.register(Sessions, SessionsAdmin)
admin.site.register(Students, StudentsAdmin)

==> Registration/apps.py <==
from django.apps import AppConfig


class RegistrationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'Registration'

==> Registration/models.py <==
# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Sessionstudent(models.Model):
    registerid = models.AutoField(db_column='RegisterID', primary_key=True)  # Field name made lowercase.
    sessionid = models.ForeignKey('Sessions', models.DO_NOTHING, db_column='SessionID', blank=True, null=True)  # Field name made lowercase.
    studentid = models.ForeignKey('Students', models.DO_NOTHING, db_column='StudentID', blank=True, null=True)  # Field name made lowercase.
    presentstatus = models.IntegerField(db_column='PresentStatus', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'SessionStudent'
        unique_together = (('sessionid', 'studentid', 'presentstatus'),)


class Sessions(models.Model):
    sessionid = models.IntegerField(db_column='SessionID', primary_key=True)  # Field name made lowercase.
    roomid = models.IntegerField(db_column='RoomID', blank=True, null=True)  # Field name made lowercase.
    sessionname = models.CharField(db_column='SessionName', max_length=255, blank=True, null=True)  # Field name made lowercase.
    date = models.DateField(db_column='Date', blank=True, null=True)  # Field name made lowercase.
    starttime = models.TimeField(db_column='StartTime', blank=True, null=True)  # Field name made lowercase.
    endtime = models.TimeField(db_column='EndTime', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Sessions'


class Students(models.Model):
    studentid = models.IntegerField(db_column='StudentID', primary_key=True)  # Field name made lowercase.
    fullname = models.CharField(db_column='FullName', max_length=255, blank=True, null=True)  # Field name made lowercase.
    course = models.CharField(db_column='Course', max_length=255, blank=True, null=True)  # Field name made lowercase.
    cardserial = models.CharField(db_column='CardSerial', max_length=255, blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Students'
        unique_together = (('studentid', 'fullname', 'course', 'cardserial'),)


class Register(models.Model):
    roomid = models.IntegerField(blank=True, null=True)
    cardserial = models.CharField(max_length=255, blank=True, null=True)
    timestamp = models.DateTimeField(blank = True, null = True)

    class Meta:
        managed = False

==> Registration/serializers.py <==
from rest_framework import serializers
from Registration.models import Register, Sessionstudent, Sessions, Students

class SessionstudentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Sessionstudent
        fields = ['registerid', 'sessionid', 'studentid', 'presentstatus']

class SessionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Sessions
        fields = ['sessionid', 'roomid', 'sessionname', 'date', 'starttime', 'endtime']

class StudentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Students
        fields = ['studentid', 'fullname', 'course', 'cardserial']

class RegisterSerializer(serializers.ModelSerializer):
    class Meta:
        model = Register
        fields = ['roomid', 'cardserial', 'timestamp']

==> Registration/urls.py <==
from django.contrib import admin
from django.urls import path
from rest_framework.urlpatterns import format_suffix_patterns
from Registration import views

urlpatterns = [
    path('students/', views.StudentsList.as_view()),
    path('students/<int:pk>', views.StudentDetail.as_view()),
    path('sessions/', views.SessionsList.as_view()),
    path('sessions/<int:pk>', views.SessionDetail.as_view()),
    path('sessionstudent/', views.SessionstudentsList.as_view()),
    path('sessionstudent/<int:pk>', views.SessionstudentDetail.as_view()),
    path('register/', views.RegisterAttendance.as_view()),
]

urlpatterns = format_suffix_patterns(urlpatterns)

==> Registration/views.py <==
from datetime import time
from rest_framework import generics
from rest_framework import mixins
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.parsers import JSONParser

from Registration.models import Register, Sessionstudent, Sessions, Students
from Registration.serializers import RegisterSerializer, SessionstudentSerializer, SessionSerializer, StudentSerializer

class StudentsList(mixins.ListModelMixin,
                   mixins.CreateModelMixin,
                   generics.GenericAPIView):
    queryset = Students.objects.all()
    serializer_class = StudentSerializer
    filterset_fields = ['studentid', 'fullname', 'course']

    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        return self.create(request, *args, **kwargs)

class StudentDetail(mixins.RetrieveModelMixin,
                    mixins.UpdateModelMixin,
                    mixins.DestroyModelMixin,
                    generics.GenericAPIView):
    queryset = Students.objects.all()
    serializer_class = StudentSerializer

    def get(self, request, *args, **kwargs):
        return self.retrieve(request, *args, **kwargs)

    def put(self, request, *args, **kwargs):
        return self.update(request, *args, **kwargs)

    def delete(self, request, *args, **kwargs):
        return self.destroy(request, *args, **kwargs)

class SessionsList(mixins.ListModelMixin,
                   mixins.CreateModelMixin,
                   generics.GenericAPIView):
    queryset = Sessions.objects.all()
    serializer_class = SessionSerializer
    filterset_fields = ['sessionid', 'roomid', 'sessionname', 'date', 'starttime', 'endtime']

    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        return self.create(request, *args, **kwargs)

class SessionDetail(mixins.RetrieveModelMixin,
                    mixins.UpdateModelMixin,
                    mixins.DestroyModelMixin,
                    generics.GenericAPIView):
    queryset = Sessions.objects.all()
    serializer_class = SessionSerializer

    def get(self, request, *args, **kwargs):
        return self.retrieve(request, *args, **kwargs)

    def put(self, request, *args, **kwargs):
        return self.update(request, *args, **kwargs)

    def delete(self, request, *args, **kwargs):
        return self.destroy(request, *args, **kwargs)

class SessionstudentsList(mixins.ListModelMixin,
                   mixins.CreateModelMixin,
                   generics.GenericAPIView):
    queryset = Sessionstudent.objects.all()
    serializer_class = SessionstudentSerializer
    filterset_fields = ['sessionid', 'studentid', 'presentstatus']

    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        return self.create(request, *args, **kwargs)

class SessionstudentDetail(mixins.RetrieveModelMixin,
                    mixins.UpdateModelMixin,
                    mixins.DestroyModelMixin,
                    generics.GenericAPIView):
    queryset = Sessionstudent.objects.all()
    serializer_class = SessionstudentSerializer

    def get(self, request, *args, **kwargs):
        return self.retrieve(request, *args, **kwargs)

    def put(self, request, *args, **kwargs):
        return self.update(request, *args, **kwargs)

    def delete(self, request, *args, **kwargs):
        return self.destroy(request, *args, **kwargs)




class RegisterAttendance(APIView):
    def post(self, request, format = None):
        serializer = RegisterSerializer(data = request.data)
        if serializer.is_valid():
            roomid = serializer.data['roomid']
            cardserial = serializer.data['cardserial']
            timestamp = serializer.data['timestamp'].strip("Z")
            date = timestamp.split("T")[0]
            inTime = timestamp.split("T")[1].split(":")
            starttime = time(int(inTime[0]))

            sessionid = Sessions.objects.get(roomid = roomid, date = date, starttime = starttime).sessionid
            studentid = Students.objects.get(cardserial = cardserial).studentid

            sessionStudentSerializer = SessionstudentSerializer(data = {'sessionid': sessionid, 'studentid': studentid, 'presentstatus': 1})

            sessionStudentSerializer.is_valid()
            sessionStudentSerializer.save()
            return Response(serializer.data, status = status.HTTP_201_CREATED)
        return  Response(serializer.errors, status = status.HTTP_400_BAD_REQUEST)

==> /etc/nginx/nginx.conf <==
# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

rtmp {
    server {
        #listen 1935;
	listen [::]:1935;
	application live {
	    live on;
	}
    }
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    server {
        listen       80;
        listen       [::]:80;
        server_name  _;
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        error_page 404 /404.html;
        location = /404.html {
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        }
    }

    server {
        listen       80;
	listen       [::]:80;
	server_name  attend.rocky-dev.local;

	return 301 https://$server_name$request_uri;
    }

    server {
    	listen       443 ssl;
	listen       [::]:443 ssl;
	include snippets/self-signed.conf;
	server_name  attend.rocky-dev.local;
	#server_name  192.168.122.50;
	access_log   /var/log/nginx/api.log;

	location /static {
	    default_type        text/javascript;
	    alias               /usr/share/nginx/attendance_backend/EAMRegistrationSystem/static;
	}

	location /admin {
	    proxy_pass          http://unix:/run/RegistrationSystem/RegistrationSystem.sock;
	    proxy_set_header    Host    $host;
	    proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
	    proxy_set_header    X-Forwarded-Proto    $scheme;
	    proxy_redirect      http://unix:/run/RegistrationSystem/RegistrationSystem.sock http://attend.rocky-dev.local;
	}
	
	location /api {
	    proxy_pass          http://unix:/run/RegistrationSystem/RegistrationSystem.sock;
	    proxy_set_header    Host    $host;
	    proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
	    proxy_set_header    X-Forwarded-Proto    $scheme;
	    proxy_redirect      http://unix:/run/RegistrationSystem/RegistrationSystem.sock http://attend.rocky-dev.local;
	}
    }

    server {
        listen        8080;
	listen        [::]:8080;
	location      /stat {
	    rtmp_stat all;
	    rtmp_stat_stylesheet stat.xsl;
	}
	
	location /stat.xsl {
	    root /usr/share/nginx/rtmp/;
        }
    }

# Settings for a TLS enabled server.
#
#    server {
#        listen       443 ssl http2;
#        listen       [::]:443 ssl http2;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        ssl_certificate "/etc/pki/nginx/server.crt";
#        ssl_certificate_key "/etc/pki/nginx/private/server.key";
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_ciphers PROFILE=SYSTEM;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        error_page 404 /404.html;
#            location = /40x.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#            location = /50x.html {
#        }
#    }

}


==> /etc/nginx/snippets/self-signed.conf <==
ssl_certificate /etc/ssl/certs/nginx.crt;
ssl_certificate_key /etc/ssl/private/nginx.key;

ssl_protocols TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
ssl_session_timeout 10m;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off;
ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection "1; mode=block";

ssl_dhparam /etc/nginx/dhparam.pem;
ssl_ecdh_curve secp384r1;
